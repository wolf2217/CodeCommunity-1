<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="profileImage.InitialImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        B7O6HkKCwpaEAAAAAElFTkSuQmCC
</value>
  </data>
</root>